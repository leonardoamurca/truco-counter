{"version":3,"sources":["containers/Teams/Teams.module.css","components/Team/Team.module.css","components/Team/Team.js","containers/Teams/Teams.js","containers/App.js","serviceWorker.js","index.js","containers/assets/truco_logo.png","containers/App.module.css"],"names":["module","exports","Teams","Team","buttonContainer","team","props","classes","push","styles","react_default","a","createElement","className","name","type","value","onChange","change","join","onClick","minClick","plusClick","counter","teams","leftCounter","leftName","event","nameChange","plusLeft","minLeft","rightCounter","rightName","plusRight","minRight","App","state","leftTeam","rightTeam","nameChangeHandler","_this","Object","objectSpread","target","setState","plusLeftHandler","count","minLeftHandler","plusRightHandler","minRightHandler","src","logo","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","__webpack_require__","p"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,MAAA,kGCAlBF,EAAAC,QAAA,CAAkBE,KAAA,mBAAAC,gBAAA,+MCmBHC,EAjBF,SAAEC,GACb,IAAIC,EAAU,GAEd,OADAA,EAAQC,KAAKC,IAAOL,iBAElBM,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,IAAON,MACrBO,EAAAC,EAAAC,cAAA,SAAIN,EAAMQ,MACVJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,MAAOV,EAAMQ,KAAMG,SAAUX,EAAMY,SACtDR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAQY,KAAK,MAC3BT,EAAAC,EAAAC,cAAA,UAAQQ,QAASd,EAAMe,UAAvB,KACAX,EAAAC,EAAAC,cAAA,UAAQQ,QAASd,EAAMgB,WAAvB,MAEFZ,EAAAC,EAAAC,cAAA,SAAIN,EAAMiB,4BCWDC,EAtBD,SAAElB,GACd,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,IAAOP,OACrBQ,EAAAC,EAAAC,cAACT,EAAD,CACEoB,QAASjB,EAAMmB,YACfX,KAAMR,EAAMoB,SACZR,OAAQ,SAACS,GAAD,OAAWrB,EAAMsB,WAAWD,EAAOrB,EAAMoB,WACjDJ,UAAWhB,EAAMuB,SACjBR,SAAUf,EAAMwB,UAGlBpB,EAAAC,EAAAC,cAACT,EAAD,CACEoB,QAASjB,EAAMyB,aACfjB,KAAMR,EAAM0B,UACZd,OAAQ,SAACS,GAAD,OAAWrB,EAAMsB,WAAWD,EAAOrB,EAAM0B,YACjDV,UAAWhB,EAAM2B,UACjBZ,SAAUf,EAAM4B,aC2FTC,6MAxGbC,MAAQ,CACNC,SAAU,CACRvB,KAAM,UACNS,QAAS,GAEXe,UAAW,CACTxB,KAAM,UACNS,QAAS,MAIbgB,kBAAoB,SAACZ,EAAOb,GAC1B,GAAGA,IAAS0B,EAAKJ,MAAMC,SAASvB,KAAM,CACpC,IAAMuB,EAAQI,OAAAC,EAAA,EAAAD,CAAA,GAAQD,EAAKJ,MAAMC,UACjCA,EAASvB,KAAOa,EAAMgB,OAAO3B,MAE7BwB,EAAKI,SAAS,CAACP,SAAU,CACvBvB,KAAMuB,EAASvB,KACfS,QAASiB,EAAKJ,MAAMC,SAASd,eAG1B,CACL,IAAMe,EAASG,OAAAC,EAAA,EAAAD,CAAA,GAAQD,EAAKJ,MAAME,WAClCA,EAAUxB,KAAOa,EAAMgB,OAAO3B,MAE9BwB,EAAKI,SAAS,CACZN,UAAW,CACTxB,KAAMwB,EAAUxB,KAChBS,QAASiB,EAAKJ,MAAME,UAAUf,eAMtCsB,gBAAkB,WAChB,IAAMC,EAAKL,OAAAC,EAAA,EAAAD,CAAA,GAAOD,EAAKJ,MAAMC,UAC7BS,EAAMvB,SAAW,EAEjBiB,EAAKI,SAAS,CACZP,SAAU,CACRvB,KAAM0B,EAAKJ,MAAMC,SAASvB,KAC1BS,QAASuB,EAAMvB,cAKrBwB,eAAiB,WACf,IAAMD,EAAKL,OAAAC,EAAA,EAAAD,CAAA,GAAQD,EAAKJ,MAAMC,UAC9BS,EAAMvB,SAAW,EAEjBiB,EAAKI,SAAS,CACZP,SAAU,CACRvB,KAAM0B,EAAKJ,MAAMC,SAASvB,KAC1BS,QAASuB,EAAMvB,cAKrByB,iBAAmB,WACjB,IAAMF,EAAKL,OAAAC,EAAA,EAAAD,CAAA,GAAQD,EAAKJ,MAAME,WAC9BQ,EAAMvB,SAAW,EAEjBiB,EAAKI,SAAS,CACZN,UAAW,CACTxB,KAAM0B,EAAKJ,MAAME,UAAUxB,KAC3BS,QAASuB,EAAMvB,cAKrB0B,gBAAkB,WAChB,IAAMH,EAAKL,OAAAC,EAAA,EAAAD,CAAA,GAAQD,EAAKJ,MAAME,WAC9BQ,EAAMvB,SAAW,EAEjBiB,EAAKI,SAAS,CACZN,UAAW,CACTxB,KAAM0B,EAAKJ,MAAME,UAAUxB,KAC3BS,QAASuB,EAAMvB,oFAQnB,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,IAAO0B,KACrBzB,EAAAC,EAAAC,cAAA,OAAKsC,IAAKC,MACVzC,EAAAC,EAAAC,cAACV,EAAD,CACA6B,aAAcqB,KAAKhB,MAAME,UAAUf,QACnCS,UAAWoB,KAAKhB,MAAME,UAAUxB,KAChCW,YAAa2B,KAAKhB,MAAMC,SAASd,QACjCG,SAAU0B,KAAKhB,MAAMC,SAASvB,KAC9Bc,WAAYwB,KAAKb,kBACjBV,SAAUuB,KAAKP,gBACff,QAASsB,KAAKL,eACdd,UAAWmB,KAAKJ,iBAChBd,SAAUkB,KAAKH,0BAlGLI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBrE,EAAAC,QAAiBqE,EAAAC,EAAuB,0DCCxCvE,EAAAC,QAAA,CAAkBkC,IAAA","file":"static/js/main.32dabb55.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Teams\":\"Teams_Teams__2SYJc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Team\":\"Team_Team__5cCcF\",\"buttonContainer\":\"Team_buttonContainer__g0lfc\"};","import React from 'react';\nimport styles from './Team.module.css';\n\nconst team = ( props ) => {\n  let classes = [];\n  classes.push(styles.buttonContainer);\n  return (\n    <div className={styles.Team}>\n      <p>{props.name}</p>\n      <input type=\"text\" value={props.name} onChange={props.change}/>\n      <br/>\n      <div className={classes.join(' ')}>\n        <button onClick={props.minClick}>-</button>\n        <button onClick={props.plusClick}>+</button>\n      </div>\n      <p>{props.counter}</p>\n    </div>\n  );\n}\n\nexport default team;","import React from 'react';\nimport Team from '../../components/Team/Team';\nimport styles from './Teams.module.css';\n\nconst teams = ( props ) => {\n  return (\n    <div className={styles.Teams}>\n      <Team \n        counter={props.leftCounter} \n        name={props.leftName} \n        change={(event) => props.nameChange(event, props.leftName)} \n        plusClick={props.plusLeft}\n        minClick={props.minLeft}\n        />\n      \n      <Team \n        counter={props.rightCounter} \n        name={props.rightName} \n        change={(event) => props.nameChange(event, props.rightName)} \n        plusClick={props.plusRight}\n        minClick={props.minRight}\n        />\n    </div>\n  );\n}\n\nexport default teams;","import React, { Component } from 'react';\nimport logo from './assets/truco_logo.png';\nimport styles from  './App.module.css';\nimport Teams from '../containers/Teams/Teams';\n\n\nclass App extends Component {\n  state = {\n    leftTeam: {\n      name: 'Team 01',\n      counter: 0,\n    },\n    rightTeam: {\n      name: 'Team 02',\n      counter: 0,\n    }\n  }\n\n  nameChangeHandler = (event, name) => {\n    if(name === this.state.leftTeam.name) {\n      const leftTeam = { ...this.state.leftTeam }\n      leftTeam.name = event.target.value;\n      \n      this.setState({leftTeam: {\n        name: leftTeam.name,\n        counter: this.state.leftTeam.counter,\n      }});\n\n    } else {\n      const rightTeam = { ...this.state.rightTeam }\n      rightTeam.name = event.target.value;\n\n      this.setState({\n        rightTeam: {\n          name: rightTeam.name,\n          counter: this.state.rightTeam.counter,\n        }\n      });\n    }\n  }\n\n  plusLeftHandler = () => {\n    const count = {...this.state.leftTeam};\n    count.counter += 2;\n\n    this.setState({\n      leftTeam: {\n        name: this.state.leftTeam.name,\n        counter: count.counter\n      }\n    });\n  }\n\n  minLeftHandler = () => {\n    const count = { ...this.state.leftTeam };\n    count.counter -= 2;\n\n    this.setState({\n      leftTeam: {\n        name: this.state.leftTeam.name,\n        counter: count.counter\n      }\n    });\n  }\n\n  plusRightHandler = () => {\n    const count = { ...this.state.rightTeam };\n    count.counter += 2;\n\n    this.setState({\n      rightTeam: {\n        name: this.state.rightTeam.name,\n        counter: count.counter\n      }\n    });\n  }\n\n  minRightHandler = () => {\n    const count = { ...this.state.rightTeam };\n    count.counter -= 2;\n\n    this.setState({\n      rightTeam: {\n        name: this.state.rightTeam.name,\n        counter: count.counter\n      }\n    });\n  }\n\n  \n\n  render() {\n    return (\n      <div className={styles.App}>\n        <img src={logo}/>\n        <Teams \n        rightCounter={this.state.rightTeam.counter}\n        rightName={this.state.rightTeam.name}\n        leftCounter={this.state.leftTeam.counter}\n        leftName={this.state.leftTeam.name}\n        nameChange={this.nameChangeHandler}\n        plusLeft={this.plusLeftHandler}\n        minLeft={this.minLeftHandler}\n        plusRight={this.plusRightHandler}\n        minRight={this.minRightHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/truco_logo.7efdfcbf.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__wJMGl\"};"],"sourceRoot":""}